<div class="map_ui">
  <div id="map"></div>

  <div class="maptools">
    <%= form_with model: @task, data: { turbo: false } do |f| %>
      <p style="text-align: center;"><strong>Select AoI from GeoJSON</strong></p>
      <div class="mapform_inner">
        <%= f.file_field :geojson_file %>
        <%= f.submit 'Send GeoJSON' %>
      </div>
    <% end %>

    <p style="text-align: center;"><strong>AoI marking</strong></p>

    <%= form_with model: @task do |f| %>
      <%= f.hidden_field :polygon %>
      <%= f.hidden_field :lat %>
      <%= f.hidden_field :lon %>

      <div class="mapform_inner">
        <%= button_tag 'Clear last marker', { :type => :button, :onclick => 'clearlastmarker();' } %>
        <%= button_tag 'Clear map',         { :type => :button, :onclick => 'clearlastmarker();', :class => :button_alert } %>
        <%= f.label :country, 'Find country:' %>
        <%= f.collection_select :country, Country.order(:name), :coord, :name, { :prompt => true }, { :onchange => 'changeCountry();' } %>
      </div>

      <p style="text-align: center;"><strong>Settings</strong></p>

      <div class="mapform mapform_inner">
        <div class="mapform_inner_horizontal">
          <%= f.label :zl, 'Zone lenght (zl):' %>
          <%= f.number_field :zl, { :value => 30, :in => 10..100, :required => true } %>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.check_box :pois_use_all %>
            <%= f.label :pois_use_all, 'Consider PoIs outside AoI' %>
          </div>
        </div>

        <p style="text-align: center;"><strong>Points of Interest (PoIs)</strong></p>
        
        <div class="mapform_inner_horizontal">
          <div>
            <%= f.check_box :poi_hospital, { :checked => true } %>
            <%= f.label :poi_hospital, 'Hospitals' %>
          </div>
          <div>
            <%= f.label :w_hospital, 'f(p):' %>
            <%= f.number_field :w_hospital, { :value => 10, :in => 1..99, :required => true } %>
          </div>
        </div>
        
        <div class="mapform_inner_horizontal">
          <div>
            <%= f.check_box :poi_firedept, { :checked => true } %>
            <%= f.label :poi_firedept, 'Fire Stations' %>
          </div>
          <div>
            <%= f.label :w_firedept, 'f(p):' %>
            <%= f.number_field :w_firedept, { :value => 5, :in => 1..99, :required => true } %>
          </div>
        </div>
        
        <div class="mapform_inner_horizontal">
          <div>
            <%= f.check_box :poi_police, { :checked => true } %>
            <%= f.label :poi_police, 'Police Stations' %>
          </div>
          <div>
            <%= f.label :w_police, 'f(p):' %>
            <%= f.number_field :w_police, { :value => 2, :in => 1..99, :required => true } %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.check_box :poi_metro %>
            <%= f.label :poi_metro, 'Metro Stations' %>
          </div>
          <div>
            <%= f.label :w_metro, 'f(p):' %>
            <%= f.number_field :w_metro, { :value => 1, :in => 1..99, :required => true } %>
          </div>
        </div>

        <p style="text-align: center;"><strong>EDUs positioning</strong></p>
        
        <div class="mapform_inner_horizontal">
          <div>
            <%= f.label :edus, 'Number of EDUs:' %>
            <%= f.number_field :edus, { :value => 300, :in => 1..3000, :required => true } %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :none, { :checked => true } %>
            <%= f.label :edu_alg_none, 'None (no EDUs positioning)' %>
          </div>
        </div>
        
        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :random %>
            <%= f.label :edu_alg_random, 'Random' %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :balanced %>
            <%= f.label :edu_alg_balanced, 'Balanced' %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :enhanced %>
            <%= f.label :edu_alg_enhanced, 'Balanced+' %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :restricted %>
            <%= f.label :edu_alg_restricted, 'Restricted' %>
          </div>
        </div>

        <div class="mapform_inner_horizontal">
          <div>
            <%= f.radio_button :edu_alg, :restricted_plus %>
            <%= f.label :edu_alg_restricted_plus, 'Restricted+' %>
          </div>
        </div>

        <p style="text-align: center;"><strong>Task description</strong></p>
        
        <div class="mapform_inner_horizontal" style="justify-content: center;">
          <%= f.text_area :description, { :size => '30x5', :required => true } %>
        </div>
      </div>

      <div class="mapform_inner">
        <%= f.submit 'Submit task', { :class => :button_default } %>
      </div>
    <% end %>
  </div>

</div>

<script>
  task_lat = parseFloat(document.getElementById('task_lat').value);
  task_lon = parseFloat(document.getElementById('task_lon').value);
  map = L.map('map').setView([task_lat, task_lon], 6);
  markers = [];
  polpoints = [];
  html_polygon = document.getElementById('task_polygon');
  
  polygon = null;
  closed = false;

  tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> | <a href="https://cityzones.just.pro.br">CityZones</a>'
  }).addTo(map);

  // Check if there is a polygon
  html_polpoints = eval(html_polygon.value);
  if (html_polpoints.length > 0) {
    html_polpoints.forEach((value, index, array) => {
      addpoint(value[1], value[0]);
    });

    createpolygon();
    map.fitBounds(polygon.getBounds());
  }

  /**
   *  Add polygon point function.
   *
   *  Adds a new polygon point to the set and a marker on the map.
   */
  function addpoint(lat, lon) {
    // If the polygon is already closed, we don't allow more points
    if (closed == true) {
      return;
    }

    // Push the coordinates to our polygon list
    polpoints.push({
      'lat': lat,
      'lon': lon
    });

    // Creates a marker
    let marker = L.marker([lat, lon]).addTo(map);
    markers.push(marker);
  }

  function createpolygon() {
    let str_polygon = '';

    for (let i = 0; i < polpoints.length - 1; i++) {
      str_polygon = str_polygon + '[' + polpoints[i]['lon'] + ', ' + polpoints[i]['lat'] + '], ';
    }
    let i = polpoints.length - 1;
    str_polygon = str_polygon + '[' + polpoints[i]['lon'] + ', ' + polpoints[i]['lat'] + ']';

    html_polygon.value = '[' + str_polygon + ']';
    polygon = L.polygon([...polpoints]).addTo(map);
    closed = true;
  }

  /**
   *  Clear map function.
   *
   *  Clears the map markings (markers and polygon).
   */
  function clearmap() {
    if (polygon) {
      map.removeLayer(polygon);
      polygon = null;
    }
    
    while (markers.length > 0) {
      marker = markers.pop();
      map.removeLayer(marker);
    }

    while (polpoints.length > 0) {
      polpoints.pop();
    }

    closed = false;
  }

  /**
   *  Clear last marker function.
   *
   *  Clears the last marker on the map. Works like an undo button.
   */
  function clearlastmarker() {
    if (markers.length > 0) {
      marker = markers.pop();
      polpoints.pop();
      map.removeLayer(marker);
    }
    
    if (polygon) {
      map.removeLayer(polygon);
      polygon = null;
      closed = false;
    }
  }

  /**
   *  Click event.
   *  
   *  Whenever a user clicks on the map, the app should add the corresponding
   *  coordiniates to create a list of points that will generate a polygon
   *  for AoI selection.
   */
  function onMapClick(e) {
    addpoint(e.latlng['lat'], e.latlng['lng']);

    // The first marker gets a click event to close the polygon
    if (markers.length == 1) {
      markers[0].on('click', (e) => {
        createpolygon();
      });
    }
  }

  /**
   *  Change the map position to the selected country.
   */
  function changeCountry() {
    try {
      const select = document.getElementById('task_country');
      const country = select.selectedOptions[0];
      const [lat, lon] = country['value'].split(',');
      map.setView([parseFloat(lat), parseFloat(lon)]);
    } catch (error) {
      console.log('No country selected.');
    }
  }

  map.on('click', onMapClick);
</script>
